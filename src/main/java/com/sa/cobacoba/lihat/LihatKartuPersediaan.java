/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.sa.cobacoba.lihat;

import com.sa.cobacoba.functions.GeneralFunction;

public class LihatKartuPersediaan extends javax.swing.JPanel {

    java.sql.Connection cons;
    public LihatKartuPersediaan(java.sql.Connection conn) {
        cons = conn;
        initComponents();
        getNamaBarang();
        namaBarang.setSelectedIndex(-1);
    }
    
    private void getNamaBarang() {
        try (java.sql.Statement stmt = cons.createStatement()) {
            java.sql.ResultSet resultSet = stmt.executeQuery("SELECT nama_barang FROM stock ORDER BY nama_barang");
            while (resultSet.next()) {
                namaBarang.addItem(resultSet.getString("nama_barang"));
            }
        } catch (java.sql.SQLException e) {
            javax.swing.JOptionPane.showMessageDialog(null, "Error Querying nama_barang", "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        namaBarang = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(51, 51, 51));
        setMinimumSize(new java.awt.Dimension(1350, 665));
        setPreferredSize(new java.awt.Dimension(1350, 665));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel1.setMinimumSize(new java.awt.Dimension(1350, 130));
        jPanel1.setPreferredSize(new java.awt.Dimension(1350, 130));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nama Barang");

        namaBarang.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(namaBarang, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(292, 292, 292)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(911, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(namaBarang, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jTable1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nomor Nota", "Tanggal Nota", "Nama Client", "Kota", "Tipe", "Harga", "qty_in", "qty_out", "qty_akhir"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(30);
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        javax.swing.table.DefaultTableModel tblModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        if (tblModel.getRowCount() != 0) {
            tblModel.setRowCount(0);
        }
        
        
        String namaBarangString;
        try {
            namaBarangString = namaBarang.getSelectedItem().toString();
        } catch (java.lang.NullPointerException e) {
            return;
        }
        
//        CARI STOCK AWAL
        int stockAwal = 0;
        try (java.sql.PreparedStatement stmt = cons.prepareStatement("SELECT stock_awal FROM stock WHERE nama_barang = ?"))
        {
            stmt.setString(1, namaBarangString);
            java.sql.ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
                stockAwal = resultSet.getInt("stock_awal");
            }
        } catch (java.sql.SQLException e) {
            javax.swing.JOptionPane.showMessageDialog(null, "Error Querying stock awal", "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        
        String[] dataPertama = {"", "", "SALDO AWAL", "",
                                "", "", "", "", String.valueOf(stockAwal)};
        tblModel.addRow(dataPertama);
        
        String query = "SELECT * FROM ( "
                                + "SELECT " 
                                    + "jual.*, " 
                                    + "client.nama_client, "
                                    + "client.kota_client, "
                                    + "jretur.qty_barang AS banyak_retur, " 
                                    + "jretur.tanggal_retur " 
                                + "FROM jual " 
                                + "LEFT JOIN client " 
                                + "ON jual.id_client = client.id " 
                                + "LEFT JOIN jretur " 
                                + "ON jual.id = jretur.id_jual "
                                + "WHERE jual.nama_barang = ? " 
                                + "UNION ALL " 
                                + "SELECT " 
                                    + "beli.*, NULL AS nama_sales, " 
                                    + "client.nama_client, " 
                                    + "client.kota_client, " 
                                    + "bretur.qty_barang AS banyak_retur, " 
                                    + "bretur.tanggal_retur " 
                                + "FROM beli " 
                                + "LEFT JOIN client " 
                                + "ON beli.id_client = client.id " 
                                + "LEFT JOIN bretur " 
                                + "ON beli.id = bretur.id_beli "
                                + "WHERE beli.nama_barang = ? "
                        + ") AS combined "
                        + "ORDER BY combined.tanggal_nota";
        
        long totalQtyIn = 0, totalQtyOut = 0, qtyAkhirBanget = stockAwal;
        try (java.sql.PreparedStatement stmt = cons.prepareStatement(query)) {
            stmt.setString(1, namaBarangString);
            stmt.setString(2, namaBarangString);
            java.sql.ResultSet resultSet = stmt.executeQuery();
            String nomorNotaString, tipe, namaString, kotaString;
            java.sql.Date sqlDate;
            int harga, qtyIn = 0, qtyOut = 0, qtyAkhir = 0;
            while (resultSet.next()) {
                nomorNotaString = resultSet.getString("nomor_nota");
                sqlDate = resultSet.getDate("tanggal_nota");
                tipe = resultSet.getString("tipe");
                namaString = resultSet.getString("nama_client");
                kotaString = resultSet.getString("kota_client");
                harga = resultSet.getInt("harga_barang");
                
                int banyakRetur = resultSet.getInt("banyak_retur");
                if (banyakRetur == 0) {
                    if (tipe.equals("B")) {
                        qtyIn = resultSet.getInt("qty_barang");
                        qtyOut = 0;
                        stockAwal += qtyIn;
                        qtyAkhir = stockAwal;
                        
                        totalQtyIn += (long) qtyIn;
                    } else if (tipe.equals("J")) {
                        qtyOut = resultSet.getInt("qty_barang");
                        qtyIn = 0;
                        stockAwal -= qtyOut;
                        qtyAkhir = stockAwal;
                        
                        totalQtyOut += (long) qtyOut;
                    }
                } else {
                    if (tipe.equals("B")) {
                        qtyIn = resultSet.getInt("qty_barang") + banyakRetur;
                        qtyOut = 0;
                        stockAwal += qtyIn;
                        qtyAkhir = stockAwal;
                        
                        totalQtyIn += (long) qtyIn;
                    } else if (tipe.equals("J")) {
                        qtyOut = resultSet.getInt("qty_barang") + banyakRetur;
                        qtyIn = 0;
                        stockAwal -= qtyOut;
                        qtyAkhir = stockAwal;
                        
                        totalQtyOut += (long) qtyOut;
                    }
                }
                
                
                String[] row = {nomorNotaString, 
                                GeneralFunction.sqlDate2String(sqlDate), 
                                namaString, 
                                (kotaString == null) ? "" : kotaString, 
                                tipe, String.valueOf(harga), 
                                qtyIn != 0 ? String.valueOf(qtyIn) : "", 
                                qtyOut != 0 ? String.valueOf(qtyOut) : "", 
                                String.valueOf(qtyAkhir)};
                tblModel.addRow(row);
                
                // klo ada retur
                if (banyakRetur != 0) {
                    if (tipe.equals("B")) {
                        qtyOut = banyakRetur;
                        qtyIn = 0;
                        stockAwal -= qtyOut;
                        qtyAkhir = stockAwal;
                        tipe = "BR";
                        
                        totalQtyOut += (long) qtyOut;
                    } else if (tipe.equals("J")) {
                        qtyIn = banyakRetur;
                        qtyOut = 0;
                        stockAwal += qtyIn;
                        qtyAkhir = stockAwal;
                        tipe = "JR";
                        
                        totalQtyIn += (long) qtyIn;
                    }
                    
                    String[] newRow = {nomorNotaString, 
                                        GeneralFunction.sqlDate2String(sqlDate), 
                                        namaString, 
                                        (kotaString == null) ? "" : kotaString, 
                                        tipe, String.valueOf(harga), 
                                        qtyIn != 0 ? String.valueOf(qtyIn) : "", 
                                        qtyOut != 0 ? String.valueOf(qtyOut) : "", 
                                        String.valueOf(qtyAkhir)};
                    tblModel.addRow(newRow);
                }
                qtyAkhirBanget = qtyAkhir;
            }
            String[] row = {"", "", "TOTAL QTY", "",
                                "", "", String.valueOf(totalQtyIn), String.valueOf(totalQtyOut), String.valueOf(qtyAkhirBanget)};
            tblModel.addRow(row);
            
        } catch (java.sql.SQLException e) {
            javax.swing.JOptionPane.showMessageDialog(null, "Error Querying nama_barang", "ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> namaBarang;
    // End of variables declaration//GEN-END:variables
}
